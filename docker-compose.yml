version: "3"
networks:
  rmc:

services:
  rabbit:
    container_name: rmc-rabbitmq
    image: rabbitmq:3.8.8-management # matching CloudAMQP version
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: rmc
      RABBITMQ_DEFAULT_PASS: rmc
      RABBITMQ_DEFAULT_VHOST: rmc
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      rmc:

  crdb:
    container_name: rmc-crdb
    image: cockroachdb/cockroach:latest
    volumes:
      - ./crdb:/cockroach/cockroach-data
    command: start --insecure --listen-addr=0.0.0.0
    ports:
      - "26257:26257"
      - "8080:8080"
    networks:
      rmc:

  redis:
    container_name: rmc-redis
    image: redis:6.0.5 # matching Redislab version
    restart: always
    command: [
        "bash",
        "-c",
        "
        docker-entrypoint.sh
        --requirepass rmc
        --appendonly yes
        ",
      ]
    ports:
      - 6379:6379
    networks:
      rmc:

  api:
    container_name: api
    depends_on:
      - crdb
      - redis
      - rabbit
    image: golang:1.15.5-buster
    volumes:
      - .:/go/src/rmc
    working_dir: /go/src/rmc
    command: go run ./cmd/api
    restart: always
    ports:
      - 42069:42069
    networks:
      rmc:

  task:
    container_name: task
    depends_on:
      - crdb
      - rabbit
    image: golang:1.15.5-buster
    volumes:
      - .:/go/src/rmc
    working_dir: /go/src/rmc
    command: go run ./cmd/task
    restart: always
    networks:
      rmc:

  worker:
    container_name: worker
    depends_on:
      - rabbit
    image: golang:1.15.5-buster
    volumes:
      - .:/go/src/rmc
      - /var/run/docker.sock:/var/run/docker.sock # FOR TESTING ONLY, DON'T ACTUALLY RUN IT IN PRODUCTION
    environment:
      HOST_NAME: test
    working_dir: /go/src/rmc
    command: go run ./cmd/worker
    restart: always
    networks:
      rmc:
